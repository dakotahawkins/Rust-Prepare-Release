#!/bin/bash

####################################################################################################
# Prepares a new major, minor, or patch release
#
# Usage:
#  PLUGIN_NAME="PluginName" prepare-release (test|major|minor|patch)

main() {
    [[ -n "$PLUGIN_NAME" ]] || {
        error_exit "Environment variable PLUGIN_NAME not set."
    }

    local release_type=
    local usage_error="Invalid argument(s). Usage: prepare-release (test|major|minor|patch)"
    while [[ $# -gt 0 ]]; do
        case "$1" in
            test|major|minor|patch)
                [[ -z "$release_type" ]] || {
                    error_exit "$usage_error"
                }
                release_type="$1"
                shift
                ;;
            *)
                error_exit "$usage_error"
                ;;
        esac
    done

    [[ "$release_type" != "test" ]] && {
        git diff --quiet HEAD 2>/dev/null || {
            error_exit "There are uncommitted changes."
        }
    }

    local PLUGIN_SOURCE="./$PLUGIN_NAME/$PLUGIN_NAME.cs"
    [[ -f "$PLUGIN_SOURCE" ]] || {
        error_exit "Plugin source not found."
    }

    local RELEASE_DIR="./release/"
    [[ -d "$RELEASE_DIR" ]] || {
        error_exit "Release dir not found."
    }

    local SEMVER_TOOL="$SCRIPT_DIR/semver-tool/src/semver"
    [[ -x "$SEMVER_TOOL" ]] || {
        error_exit "semver-tool not executable or not found."
    }

    local VERSION_FILE="./PluginResources/version.txt"
    [[ -f "$VERSION_FILE" ]] || {
        error_exit "version.txt not found."
    }

    local current_version="$(< "$VERSION_FILE")"
    [[ -n "$current_version" ]] || {
        error_exit "Current version not found."
    }

    local new_version=
    if [[ "$release_type" != "test" ]]; then
        new_version="v$("$SEMVER_TOOL" bump $release_type $current_version 2>/dev/null)"
        [[ $? -eq 0 ]] || {
            error_exit "semver-tool failed to bump $current_version one $release_type level."
        }
    else
        new_version="$current_version"
    fi

    echo
    if [[ "$release_type" != "test" ]]; then
        echo "Bumping $current_version one $release_type level to $new_version"
    else
        echo "Creating test release for working code."
    fi
    echo

    ################################################################################################
    # Clean release dir
    #
    git clean -dfx -- "$RELEASE_DIR" > /dev/null 2>&1 || {
        error_exit "Failed to clean release dir."
    }

    ################################################################################################
    # Copy plugin source to release and update its version number
    #
    cp "$PLUGIN_SOURCE" "$RELEASE_DIR" || {
        error_exit "Failed to copy plugin source to release."
    }

    local RELEASE_PLUGIN_SOURCE="${RELEASE_DIR}${PLUGIN_NAME}.cs"
    [[ -f "$RELEASE_PLUGIN_SOURCE" ]] || {
        error_exit "Failed to copy plugin source to release."
    }

    sed -i -E "s/@VERSION@/$new_version/g" "$RELEASE_PLUGIN_SOURCE" || {
        error_exit "Failed to update version number in release plugin source."
    }

    [[ "$release_type" = "test" ]] && {
        echo "Done!"
        return
    }

    ################################################################################################
    # Write and edit changelog in release dir
    #
    local CHANGELOG="${RELEASE_DIR}CHANGELOG.md"
    echo -e "# Release $new_version\n" >"$CHANGELOG"

    git log --oneline --pretty=format:'- %s' "$current_version".. >>"$CHANGELOG" || {
        error_exit "Failed to write git log to changelog."
    }

    [[ -z "$GIT_EDITOR" ]] && {
        GIT_EDITOR="$(git var GIT_EDITOR)"
        [[ $? -eq 0 ]] || {
            error_exit "Failed to set GIT_EDITOR"
        }

        eval "$GIT_EDITOR" '"$CHANGELOG"'
    }

    ################################################################################################
    # Write new version to version.txt
    #
    echo "Updating version.txt..."
    echo "$new_version" >"$VERSION_FILE"
    local new_version_written_ok="$("$SEMVER_TOOL" \
        compare \
        $new_version \
        $(< "$VERSION_FILE") 2>/dev/null \
    )"
    [[ $? -eq 0 ]] || {
        error_exit "semver-tool failed to check version.txt."
    }
    [[ "$new_version_written_ok" = "0" ]] || {
        error_exit "Failed to write $new_version to version.txt."
    }

    ################################################################################################
    # Commit changes to version.txt, tag, and push
    #
    echo "Committing changes to version.txt..."
    git add "$VERSION_FILE" >/dev/null 2>&1 || {
        error_exit "Failed to stage updated version.txt."
    }

    local COMMIT_MSG="${RELEASE_DIR}commit.msg"
    sed -E '1 s/^# //' "$CHANGELOG" >"$COMMIT_MSG" || {
        error_exit "Failed to write changelog to commit.msg"
    }
    git commit -e -F "$COMMIT_MSG" || {
        error_exit "Failed to commit changes to version.txt."
    }
    rm "$COMMIT_MSG" >/dev/null 2>&1 || {
        error_exit "Failed to remove commit.msg"
    }

    git diff --quiet HEAD 2>/dev/null || {
        error_exit "There are uncommitted changes."
    }

    echo "Tagging new release..."
    git tag -m "Release $new_version" "$new_version" || {
        error_exit "Failed to tag new release."
    }

    echo "Pushing new release..."
    git push --follow-tags || {
        error_exit "Failed to push new release."
    }

    echo "Done!"
}

error_exit() {
    echo "Error: $1" >&2
    echo
    exit 1
}

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
cd "$SCRIPT_DIR" && cd "$(git rev-parse --show-superproject-working-tree)" || {
    error_exit "Failed to cd to top-level repo directory."
}

set -m
trap "" SIGINT
main "$@"
exit 0
